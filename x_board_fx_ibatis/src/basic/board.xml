<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
			PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
			"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!-- namespace속성 : 아래에서 작성한 SQL을 호출할 때 같이 사용된다. -->			
<sqlMap namespace="boardTest">
	<!-- 
		이 영역에 sql문에 맞는 태ㅋㅋ그를 사용하여 SQL문을 기술한다.
		
		사용할 수 있는 기본적인 태그들
		<select> ~~~ </select>
		<insert> ~~~ </insert>
		<update> ~~~ </update>
		<delete> ~~~ </delete>
	 -->
	 
	 <!-- 
	 	위 태그에서 사용되는 속성들
	 		1) id속성 : 해당 태그를 호출할 때 <sqlMap>태그의 namespace와
	 							  연결하여 사용하는 이름
	 		2) parameterClass속성 : sql문에 사용될 데이터가 들어있는 객체를
	 							  지정한다. 
	 							  (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
	 							  (typeAlia로 지정한 alias명을 사용할 수 있다.)							  
			3) resultClass속성 : select문을 실행한 결과를 담을 객체를 지정한다.
									(보통 VO클래스나 자바의 자료형이름을 사용한다.)							 
	 -->
	 	<!-- 키값 자동증가 초기화 -->
	 	<statement id="autoIncrement">
	 		alter table board auto_increment=1
	 	</statement>
	 	
	 	<!-- 조회수 증가 -->
	 	<update id="up_view" parameterClass="BoardVO">
	 		update board set board_view=#board_view#+1 where board_no = #board_no#
	 	</update>
	 	
	 	
	 	<!-- insert -->
	 	<insert id="insertBoard" parameterClass="BoardVO">
	 		insert into board (board_no, board_title, board_writer, board_date, board_content)
					 values (#board_no#, #board_title#, #board_writer#, now(), #board_content#) 
			<selectKey keyProperty="board_no" resultClass="String">
     			select max(board_no+1) from board
  			</selectKey>
	 	</insert>
	 	
	 	<!-- update (parameterClass에 alias를 지정할 수 있다.) -->
	 	<update id="updateBoard" parameterClass="BoardVO">
	 		update board set board_title=#board_title#, board_writer=#board_writer#, board_date=now(), board_content=#board_content#
	 		where board_no=#board_no#
	 	</update>
	 	
	 	<!-- delete  -->
	 	<delete id="deleteBoard" parameterClass="String">
			delete from board where board_no=#sss# 
		 </delete>
	
		<!-- select All -->
		 <select id="getAllBoardList" resultClass="BoardVO">
		 		select * from board
		 </select>
		 
		 
		<!-- 중복 체크 -->
		 <select id="getBoard" resultClass="int" parameterClass="String">
		 		select count(*) from board where board_no=#board_no#
		 </select>
		 
	 	<!-- 하나만 가져오기 -->
		 <select id="getSelectBoard" resultClass="BoardVO" parameterClass="BoardVO">
		 		select * from board where board_no=#board_no#
		 </select>
		 
			
			
		<!-- 검색 -->
		 <select id="getSearchBoard" resultClass="BoardVO" parameterClass="BoardVO">
		 		
		 		select * from board 
		 		
		 		<dynamic prepend="where"> <!-- prepend = 접두사  // 밑에 조건이 걸리면 동적 쿼리가 실행된다 --> 
		 			<isNotEmpty property="board_no" prepend="and"> <!-- isNotEmpty = !null -->
		 				board_no = #board_no#
		 			</isNotEmpty>
		 			<isNotEmpty property="board_title" prepend="and">
		 				board_title = #board_title#
		 			</isNotEmpty>
		 			<isNotEmpty property="board_writer" prepend="and">
		 				board_writer = #board_writer#
		 			</isNotEmpty>
		 			<isNotEmpty property="board_content" prepend="and">
		 				board_content like '%' || #board_content# || '%'
		 			</isNotEmpty>
		 		</dynamic>
		 		
		 		<!-- 다른방법 -->
		 		<!-- select * from mymember 
		 		where 1=1
		 		<isNotEmpty property="mem_id"> 
	 				and mem_id = #mem_id#
	 			</isNotEmpty>
	 			<isNotEmpty property="mem_name">
	 				and mem_name = #mem_name#
	 			</isNotEmpty>
	 			<isNotEmpty property="mem_tel">
	 				and mem_tel = #mem_tel#
	 			</isNotEmpty>
	 			<isNotEmpty property="mem_addr">
	 				and mem_addr like '%' || #mem_addr# || '%'
	 			</isNotEmpty> -->
	 			
		 </select>
	 
	 <!-- 
	 		parameterClass에 설정되는 값이 단일값(즉 1개의 데이터)이면
	 		SQL문에 이 값을 나타내는 변수는 특별히 이름이 정해지지 않았다.
	 		(즉, 사용자가 임의로 지정할 수 있다.)
	 -->
	
</sqlMap>			





